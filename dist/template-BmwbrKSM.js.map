{"version":3,"file":"template-BmwbrKSM.js","sources":["../src/util/template.ts"],"sourcesContent":["export function processTemplate(left_bracket: string, right_bracket: string, replacePlaceHolder: (str: string) => string, str: string) {\n    let inBracket = false, newText = \"\", bracketContent = \"\"\n    for (const char of str) {\n        switch (char) {\n            case left_bracket:\n                if (inBracket) {\n                    if (left_bracket == right_bracket) {\n                        inBracket = false\n                        newText += replacePlaceHolder(bracketContent)\n                        bracketContent = \"\"\n                    } else {\n                        inBracket = false\n                        newText += `${left_bracket}${bracketContent}${left_bracket}`\n                        bracketContent = \"\"\n                    }\n                } else {\n                    inBracket = true\n                }\n                break\n            case right_bracket:\n                if (inBracket) {\n                    inBracket = false\n                    newText += replacePlaceHolder(bracketContent)\n                    bracketContent = \"\"\n                } else {\n                    newText += char\n                }\n                break\n            case ' ':\n            case '\\n':\n            case '\\r':\n            case '\\t':\n            case '\\v':\n            case '\\f':\n                //跳过空白字符\n                //取消状态并放回字符\n                if (inBracket) {\n                    inBracket = false\n                    newText += `${left_bracket}${bracketContent}${char}`\n                    bracketContent = \"\"\n                } else {\n                    newText += char\n                }\n                break\n\n            default:\n                if (inBracket) {\n                    bracketContent += char\n                } else {\n                    newText += char\n                }\n        }\n    }\n    //for end\n    if (bracketContent != '') {\n        newText += left_bracket + bracketContent\n        inBracket = false\n    }\n    if (inBracket) {\n        newText += left_bracket\n    }\n    return newText\n}"],"names":[],"mappings":"AAAO,SAAS,eAAgB,CAAA,YAAA,EAAsB,aAAuB,EAAA,kBAAA,EAA6C,GAAa,EAAA;AACnI,EAAA,IAAI,SAAY,GAAA,KAAA,EAAO,OAAU,GAAA,EAAA,EAAI,cAAiB,GAAA,EAAA,CAAA;AACtD,EAAA,KAAA,MAAW,QAAQ,GAAK,EAAA;AACpB,IAAA,QAAQ,IAAM;AAAA,MACV,KAAK,YAAA;AACD,QAAA,IAAI,SAAW,EAAA;AACX,UAAA,IAAI,gBAAgB,aAAe,EAAA;AAC/B,YAAY,SAAA,GAAA,KAAA,CAAA;AACZ,YAAA,OAAA,IAAW,mBAAmB,cAAc,CAAA,CAAA;AAC5C,YAAiB,cAAA,GAAA,EAAA,CAAA;AAAA,WACd,MAAA;AACH,YAAY,SAAA,GAAA,KAAA,CAAA;AACZ,YAAA,OAAA,IAAW,CAAG,EAAA,YAAY,CAAG,EAAA,cAAc,GAAG,YAAY,CAAA,CAAA,CAAA;AAC1D,YAAiB,cAAA,GAAA,EAAA,CAAA;AAAA,WACrB;AAAA,SACG,MAAA;AACH,UAAY,SAAA,GAAA,IAAA,CAAA;AAAA,SAChB;AACA,QAAA,MAAA;AAAA,MACJ,KAAK,aAAA;AACD,QAAA,IAAI,SAAW,EAAA;AACX,UAAY,SAAA,GAAA,KAAA,CAAA;AACZ,UAAA,OAAA,IAAW,mBAAmB,cAAc,CAAA,CAAA;AAC5C,UAAiB,cAAA,GAAA,EAAA,CAAA;AAAA,SACd,MAAA;AACH,UAAW,OAAA,IAAA,IAAA,CAAA;AAAA,SACf;AACA,QAAA,MAAA;AAAA,MACJ,KAAK,GAAA,CAAA;AAAA,MACL,KAAK,IAAA,CAAA;AAAA,MACL,KAAK,IAAA,CAAA;AAAA,MACL,KAAK,GAAA,CAAA;AAAA,MACL,KAAK,IAAA,CAAA;AAAA,MACL,KAAK,IAAA;AAGD,QAAA,IAAI,SAAW,EAAA;AACX,UAAY,SAAA,GAAA,KAAA,CAAA;AACZ,UAAA,OAAA,IAAW,CAAG,EAAA,YAAY,CAAG,EAAA,cAAc,GAAG,IAAI,CAAA,CAAA,CAAA;AAClD,UAAiB,cAAA,GAAA,EAAA,CAAA;AAAA,SACd,MAAA;AACH,UAAW,OAAA,IAAA,IAAA,CAAA;AAAA,SACf;AACA,QAAA,MAAA;AAAA,MAEJ;AACI,QAAA,IAAI,SAAW,EAAA;AACX,UAAkB,cAAA,IAAA,IAAA,CAAA;AAAA,SACf,MAAA;AACH,UAAW,OAAA,IAAA,IAAA,CAAA;AAAA,SACf;AAAA,KACR;AAAA,GACJ;AAEA,EAAA,IAAI,kBAAkB,EAAI,EAAA;AACtB,IAAA,OAAA,IAAW,YAAe,GAAA,cAAA,CAAA;AAC1B,IAAY,SAAA,GAAA,KAAA,CAAA;AAAA,GAChB;AACA,EAAA,IAAI,SAAW,EAAA;AACX,IAAW,OAAA,IAAA,YAAA,CAAA;AAAA,GACf;AACA,EAAO,OAAA,OAAA,CAAA;AACX;;;;"}